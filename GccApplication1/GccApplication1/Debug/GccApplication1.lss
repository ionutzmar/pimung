
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cd  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000141  00000000  00000000  000003dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011a  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000177  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000008b  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitPWM>:
   PWM Output  = Non Inverted

   */


   TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	89 66       	ori	r24, 0x69	; 105
  70:	83 bf       	out	0x33, r24	; 51

   //Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32

   DDRB|=(1<<PB3);
  72:	bb 9a       	sbi	0x17, 3	; 23
  74:	08 95       	ret

00000076 <adc_init>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  7a:	87 e8       	ldi	r24, 0x87	; 135
  7c:	86 b9       	out	0x06, r24	; 6
  7e:	08 95       	ret

00000080 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  80:	97 b1       	in	r25, 0x07	; 7
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  82:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  84:	98 7f       	andi	r25, 0xF8	; 248
  86:	98 2b       	or	r25, r24
  88:	97 b9       	out	0x07, r25	; 7
	
	// start single convertion
	// write ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  8a:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes ’0? again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  8c:	36 99       	sbic	0x06, 6	; 6
  8e:	fe cf       	rjmp	.-4      	; 0x8c <adc_read+0xc>
	
	return (ADC);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	95 b1       	in	r25, 0x05	; 5
}
  94:	08 95       	ret

00000096 <main>:

int main(void)
{

	InitPWM();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <InitPWM>
	adc_init();
  9a:	0e 94 3b 00 	call	0x76	; 0x76 <adc_init>
		
	DDRC = 0x1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x0;
  a2:	1a ba       	out	0x1a, r1	; 26

		
	int val = adc_read(1);
  a4:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
	int factor = 255 / (val / 4);
  a8:	99 23       	and	r25, r25
  aa:	0c f4       	brge	.+2      	; 0xae <main+0x18>
  ac:	03 96       	adiw	r24, 0x03	; 3
  ae:	9c 01       	movw	r18, r24
  b0:	35 95       	asr	r19
  b2:	27 95       	ror	r18
  b4:	35 95       	asr	r19
  b6:	27 95       	ror	r18
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	0e 94 7c 00 	call	0xf8	; 0xf8 <__divmodhi4>
		
	SetPWMOutput(255 - factor * (val / 4));
  c2:	62 9f       	mul	r22, r18
  c4:	80 2d       	mov	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	80 95       	com	r24
}


void SetPWMOutput(uint8_t duty)
{
	OCR0=duty;
  ca:	8c bf       	out	0x3c, r24	; 60
	while (1) {
		
		
		int val = adc_read(1);
		
		SetPWMOutput((1023 - val) / 4);
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d3 e0       	ldi	r29, 0x03	; 3
	SetPWMOutput(255 - factor * (val / 4));

	while (1) {
		
		
		int val = adc_read(1);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
		
		SetPWMOutput((1023 - val) / 4);
  d6:	ae 01       	movw	r20, r28
  d8:	48 1b       	sub	r20, r24
  da:	59 0b       	sbc	r21, r25
  dc:	9a 01       	movw	r18, r20
  de:	12 f4       	brpl	.+4      	; 0xe4 <main+0x4e>
  e0:	2d 5f       	subi	r18, 0xFD	; 253
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	35 95       	asr	r19
  e6:	27 95       	ror	r18
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
}


void SetPWMOutput(uint8_t duty)
{
	OCR0=duty;
  ec:	2c bf       	out	0x3c, r18	; 60
		
		int val = adc_read(1);
		
		SetPWMOutput((1023 - val) / 4);
		
		if (val > 512)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	92 40       	sbci	r25, 0x02	; 2
  f2:	74 f3       	brlt	.-36     	; 0xd0 <main+0x3a>
			PORTC |= 0x1;
  f4:	a8 9a       	sbi	0x15, 0	; 21
  f6:	ec cf       	rjmp	.-40     	; 0xd0 <main+0x3a>

000000f8 <__divmodhi4>:
  f8:	97 fb       	bst	r25, 7
  fa:	07 2e       	mov	r0, r23
  fc:	16 f4       	brtc	.+4      	; 0x102 <__divmodhi4+0xa>
  fe:	00 94       	com	r0
 100:	07 d0       	rcall	.+14     	; 0x110 <__divmodhi4_neg1>
 102:	77 fd       	sbrc	r23, 7
 104:	09 d0       	rcall	.+18     	; 0x118 <__divmodhi4_neg2>
 106:	0e 94 90 00 	call	0x120	; 0x120 <__udivmodhi4>
 10a:	07 fc       	sbrc	r0, 7
 10c:	05 d0       	rcall	.+10     	; 0x118 <__divmodhi4_neg2>
 10e:	3e f4       	brtc	.+14     	; 0x11e <__divmodhi4_exit>

00000110 <__divmodhi4_neg1>:
 110:	90 95       	com	r25
 112:	81 95       	neg	r24
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	08 95       	ret

00000118 <__divmodhi4_neg2>:
 118:	70 95       	com	r23
 11a:	61 95       	neg	r22
 11c:	7f 4f       	sbci	r23, 0xFF	; 255

0000011e <__divmodhi4_exit>:
 11e:	08 95       	ret

00000120 <__udivmodhi4>:
 120:	aa 1b       	sub	r26, r26
 122:	bb 1b       	sub	r27, r27
 124:	51 e1       	ldi	r21, 0x11	; 17
 126:	07 c0       	rjmp	.+14     	; 0x136 <__udivmodhi4_ep>

00000128 <__udivmodhi4_loop>:
 128:	aa 1f       	adc	r26, r26
 12a:	bb 1f       	adc	r27, r27
 12c:	a6 17       	cp	r26, r22
 12e:	b7 07       	cpc	r27, r23
 130:	10 f0       	brcs	.+4      	; 0x136 <__udivmodhi4_ep>
 132:	a6 1b       	sub	r26, r22
 134:	b7 0b       	sbc	r27, r23

00000136 <__udivmodhi4_ep>:
 136:	88 1f       	adc	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	5a 95       	dec	r21
 13c:	a9 f7       	brne	.-22     	; 0x128 <__udivmodhi4_loop>
 13e:	80 95       	com	r24
 140:	90 95       	com	r25
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	08 95       	ret

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
